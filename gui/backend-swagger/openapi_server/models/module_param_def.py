# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.module_def import ModuleDef
from openapi_server import util

from openapi_server.models.module_def import ModuleDef  # noqa: E501

class ModuleParamDef(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, module_def=None, id=None, description=None, type=None):  # noqa: E501
        """ModuleParamDef - a model defined in OpenAPI

        :param module_def: The module_def of this ModuleParamDef.  # noqa: E501
        :type module_def: ModuleDef
        :param id: The id of this ModuleParamDef.  # noqa: E501
        :type id: str
        :param description: The description of this ModuleParamDef.  # noqa: E501
        :type description: str
        :param type: The type of this ModuleParamDef.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'module_def': ModuleDef,
            'id': str,
            'description': str,
            'type': str
        }

        self.attribute_map = {
            'module_def': 'module_def',
            'id': 'id',
            'description': 'description',
            'type': 'type'
        }

        self._module_def = module_def
        self._id = id
        self._description = description
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'ModuleParamDef':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ModuleParamDef of this ModuleParamDef.  # noqa: E501
        :rtype: ModuleParamDef
        """
        return util.deserialize_model(dikt, cls)

    @property
    def module_def(self):
        """Gets the module_def of this ModuleParamDef.


        :return: The module_def of this ModuleParamDef.
        :rtype: ModuleDef
        """
        return self._module_def

    @module_def.setter
    def module_def(self, module_def):
        """Sets the module_def of this ModuleParamDef.


        :param module_def: The module_def of this ModuleParamDef.
        :type module_def: ModuleDef
        """

        self._module_def = module_def

    @property
    def id(self):
        """Gets the id of this ModuleParamDef.


        :return: The id of this ModuleParamDef.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModuleParamDef.


        :param id: The id of this ModuleParamDef.
        :type id: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this ModuleParamDef.


        :return: The description of this ModuleParamDef.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModuleParamDef.


        :param description: The description of this ModuleParamDef.
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ModuleParamDef.

        Każdy typ powinien mieć dedykowany edytor w property managerze  # noqa: E501

        :return: The type of this ModuleParamDef.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModuleParamDef.

        Każdy typ powinien mieć dedykowany edytor w property managerze  # noqa: E501

        :param type: The type of this ModuleParamDef.
        :type type: str
        """
        allowed_values = ["string", "float", "integer", "quad", "region", "region_list", "resource"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
